/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CarReview } from "./CarReview";
import { CarReviewCountArgs } from "./CarReviewCountArgs";
import { CarReviewFindManyArgs } from "./CarReviewFindManyArgs";
import { CarReviewFindUniqueArgs } from "./CarReviewFindUniqueArgs";
import { CreateCarReviewArgs } from "./CreateCarReviewArgs";
import { UpdateCarReviewArgs } from "./UpdateCarReviewArgs";
import { DeleteCarReviewArgs } from "./DeleteCarReviewArgs";
import { Variant } from "../../variant/base/Variant";
import { CarReviewService } from "../carReview.service";
@graphql.Resolver(() => CarReview)
export class CarReviewResolverBase {
  constructor(protected readonly service: CarReviewService) {}

  async _carReviewsMeta(
    @graphql.Args() args: CarReviewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CarReview])
  async carReviews(
    @graphql.Args() args: CarReviewFindManyArgs
  ): Promise<CarReview[]> {
    return this.service.carReviews(args);
  }

  @graphql.Query(() => CarReview, { nullable: true })
  async carReview(
    @graphql.Args() args: CarReviewFindUniqueArgs
  ): Promise<CarReview | null> {
    const result = await this.service.carReview(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CarReview)
  async createCarReview(
    @graphql.Args() args: CreateCarReviewArgs
  ): Promise<CarReview> {
    return await this.service.createCarReview({
      ...args,
      data: {
        ...args.data,

        variant: args.data.variant
          ? {
              connect: args.data.variant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CarReview)
  async updateCarReview(
    @graphql.Args() args: UpdateCarReviewArgs
  ): Promise<CarReview | null> {
    try {
      return await this.service.updateCarReview({
        ...args,
        data: {
          ...args.data,

          variant: args.data.variant
            ? {
                connect: args.data.variant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CarReview)
  async deleteCarReview(
    @graphql.Args() args: DeleteCarReviewArgs
  ): Promise<CarReview | null> {
    try {
      return await this.service.deleteCarReview(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Variant, {
    nullable: true,
    name: "variant",
  })
  async getVariant(
    @graphql.Parent() parent: CarReview
  ): Promise<Variant | null> {
    const result = await this.service.getVariant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
