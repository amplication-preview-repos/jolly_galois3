/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CarSpecification as PrismaCarSpecification,
  Variant as PrismaVariant,
} from "@prisma/client";

export class CarSpecificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CarSpecificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.carSpecification.count(args);
  }

  async carSpecifications<T extends Prisma.CarSpecificationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarSpecificationFindManyArgs>
  ): Promise<PrismaCarSpecification[]> {
    return this.prisma.carSpecification.findMany<Prisma.CarSpecificationFindManyArgs>(
      args
    );
  }
  async carSpecification<T extends Prisma.CarSpecificationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarSpecificationFindUniqueArgs>
  ): Promise<PrismaCarSpecification | null> {
    return this.prisma.carSpecification.findUnique(args);
  }
  async createCarSpecification<T extends Prisma.CarSpecificationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarSpecificationCreateArgs>
  ): Promise<PrismaCarSpecification> {
    return this.prisma.carSpecification.create<T>(args);
  }
  async updateCarSpecification<T extends Prisma.CarSpecificationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarSpecificationUpdateArgs>
  ): Promise<PrismaCarSpecification> {
    return this.prisma.carSpecification.update<T>(args);
  }
  async deleteCarSpecification<T extends Prisma.CarSpecificationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarSpecificationDeleteArgs>
  ): Promise<PrismaCarSpecification> {
    return this.prisma.carSpecification.delete(args);
  }

  async getVariant(parentId: string): Promise<PrismaVariant | null> {
    return this.prisma.carSpecification
      .findUnique({
        where: { id: parentId },
      })
      .variant();
  }
}
