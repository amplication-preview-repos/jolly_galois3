/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CarSpecification } from "./CarSpecification";
import { CarSpecificationCountArgs } from "./CarSpecificationCountArgs";
import { CarSpecificationFindManyArgs } from "./CarSpecificationFindManyArgs";
import { CarSpecificationFindUniqueArgs } from "./CarSpecificationFindUniqueArgs";
import { CreateCarSpecificationArgs } from "./CreateCarSpecificationArgs";
import { UpdateCarSpecificationArgs } from "./UpdateCarSpecificationArgs";
import { DeleteCarSpecificationArgs } from "./DeleteCarSpecificationArgs";
import { Variant } from "../../variant/base/Variant";
import { CarSpecificationService } from "../carSpecification.service";
@graphql.Resolver(() => CarSpecification)
export class CarSpecificationResolverBase {
  constructor(protected readonly service: CarSpecificationService) {}

  async _carSpecificationsMeta(
    @graphql.Args() args: CarSpecificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CarSpecification])
  async carSpecifications(
    @graphql.Args() args: CarSpecificationFindManyArgs
  ): Promise<CarSpecification[]> {
    return this.service.carSpecifications(args);
  }

  @graphql.Query(() => CarSpecification, { nullable: true })
  async carSpecification(
    @graphql.Args() args: CarSpecificationFindUniqueArgs
  ): Promise<CarSpecification | null> {
    const result = await this.service.carSpecification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CarSpecification)
  async createCarSpecification(
    @graphql.Args() args: CreateCarSpecificationArgs
  ): Promise<CarSpecification> {
    return await this.service.createCarSpecification({
      ...args,
      data: {
        ...args.data,

        variant: args.data.variant
          ? {
              connect: args.data.variant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CarSpecification)
  async updateCarSpecification(
    @graphql.Args() args: UpdateCarSpecificationArgs
  ): Promise<CarSpecification | null> {
    try {
      return await this.service.updateCarSpecification({
        ...args,
        data: {
          ...args.data,

          variant: args.data.variant
            ? {
                connect: args.data.variant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CarSpecification)
  async deleteCarSpecification(
    @graphql.Args() args: DeleteCarSpecificationArgs
  ): Promise<CarSpecification | null> {
    try {
      return await this.service.deleteCarSpecification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Variant, {
    nullable: true,
    name: "variant",
  })
  async getVariant(
    @graphql.Parent() parent: CarSpecification
  ): Promise<Variant | null> {
    const result = await this.service.getVariant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
