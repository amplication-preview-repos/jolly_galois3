/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CarFeatureService } from "../carFeature.service";
import { CarFeatureCreateInput } from "./CarFeatureCreateInput";
import { CarFeature } from "./CarFeature";
import { CarFeatureFindManyArgs } from "./CarFeatureFindManyArgs";
import { CarFeatureWhereUniqueInput } from "./CarFeatureWhereUniqueInput";
import { CarFeatureUpdateInput } from "./CarFeatureUpdateInput";

export class CarFeatureControllerBase {
  constructor(protected readonly service: CarFeatureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CarFeature })
  async createCarFeature(
    @common.Body() data: CarFeatureCreateInput
  ): Promise<CarFeature> {
    return await this.service.createCarFeature({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CarFeature] })
  @ApiNestedQuery(CarFeatureFindManyArgs)
  async carFeatures(@common.Req() request: Request): Promise<CarFeature[]> {
    const args = plainToClass(CarFeatureFindManyArgs, request.query);
    return this.service.carFeatures({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CarFeature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async carFeature(
    @common.Param() params: CarFeatureWhereUniqueInput
  ): Promise<CarFeature | null> {
    const result = await this.service.carFeature({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CarFeature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCarFeature(
    @common.Param() params: CarFeatureWhereUniqueInput,
    @common.Body() data: CarFeatureUpdateInput
  ): Promise<CarFeature | null> {
    try {
      return await this.service.updateCarFeature({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CarFeature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCarFeature(
    @common.Param() params: CarFeatureWhereUniqueInput
  ): Promise<CarFeature | null> {
    try {
      return await this.service.deleteCarFeature({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
