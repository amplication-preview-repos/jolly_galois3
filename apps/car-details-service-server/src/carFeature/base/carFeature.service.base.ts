/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CarFeature as PrismaCarFeature } from "@prisma/client";

export class CarFeatureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CarFeatureCountArgs, "select">
  ): Promise<number> {
    return this.prisma.carFeature.count(args);
  }

  async carFeatures<T extends Prisma.CarFeatureFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarFeatureFindManyArgs>
  ): Promise<PrismaCarFeature[]> {
    return this.prisma.carFeature.findMany<Prisma.CarFeatureFindManyArgs>(args);
  }
  async carFeature<T extends Prisma.CarFeatureFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarFeatureFindUniqueArgs>
  ): Promise<PrismaCarFeature | null> {
    return this.prisma.carFeature.findUnique(args);
  }
  async createCarFeature<T extends Prisma.CarFeatureCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarFeatureCreateArgs>
  ): Promise<PrismaCarFeature> {
    return this.prisma.carFeature.create<T>(args);
  }
  async updateCarFeature<T extends Prisma.CarFeatureUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarFeatureUpdateArgs>
  ): Promise<PrismaCarFeature> {
    return this.prisma.carFeature.update<T>(args);
  }
  async deleteCarFeature<T extends Prisma.CarFeatureDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarFeatureDeleteArgs>
  ): Promise<PrismaCarFeature> {
    return this.prisma.carFeature.delete(args);
  }
}
